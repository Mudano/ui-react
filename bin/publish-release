#!/usr/bin/env node

/* eslint-disable import/no-extraneous-dependencies, no-console */

const fs = require('fs');
const path = require('path');
const shell = require('shelljs');
const npm = require('npm-utils');
const { userMessage, executeSilently } = require('../release-src/shell-utils');
const { hasUntrackedFiles } = require('../release-src/untracked-files');

const homeDir = require('os').homedir();

const hasNpmRc = fs.existsSync(path.resolve(homeDir, '.npmrc'));

// @TODO: dry run flag, silent flag, help flag

/*
 * if we have untracked files OR
 * we do not have a NPM_TOKEN
 * cancel immediately!
 *
 */

if (hasUntrackedFiles()) {
    userMessage(
        'You have untracked files! Cancelling publish!',
        'white',
        { bg: 'bgRed', iconLeft: 'ðŸ˜±' },
    );
    return 1;
}

if (!process.env.NPM_TOKEN && !hasNpmRc) {
    userMessage(
        'We cannot find a NPM_TOKEN environment variable',
        'black',
        { bg: 'bgYellow' },
    );
    userMessage(' To get a token, on your local machine, run:', 'reset', { flags: '-n' });
    userMessage('npm login --scope=@Mudano', 'magenta');
    userMessage(' And then find the token here:', 'reset', { flags: '-n' });
    userMessage('~/.npmrc', 'magenta');
    userMessage('Next save the token as an environment variable...\n', 'reset');
    return 1;
}

const { getCurrentBranch, pullLatest, checkoutBranch } = require('../release-src/branch-and-tags');

const currentBranch = getCurrentBranch();

checkoutBranch('master');
pullLatest();

// @NB: to ensure latest version we need to get package.json version from master
const packageJson = require('../package.json');

const latestVersion = `v${packageJson.version}`;

userMessage(`Publishing UI React ${latestVersion} to NPM`, 'magenta', { iconRight: 'ðŸš€' });

shell.exec('git fetch --all --tags', executeSilently);

userMessage(`Checking out tag ${latestVersion}...`, 'yellow');
shell.exec(`git checkout tags/${latestVersion}`, executeSilently);

userMessage('Publishing to NPM...', 'yellow');

if (hasNpmRc) {
    npm.publish();
} else {
    npm.setAuthToken()
        .then(npm.publish)
        .catch(error => console.error(error));
}

userMessage(`Checking out original branch (${currentBranch})...`, 'yellow');
checkoutBranch(currentBranch);

return 0;
