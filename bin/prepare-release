#!/usr/bin/env node

/* eslint-disable import/no-extraneous-dependencies, no-console */

const path = require('path');
const moment = require('moment');
const { userMessage } = require('../release-src/shell-utils');
const { hasUntrackedFiles } = require('../release-src/untracked-files');

const versionPart = process.argv[2];

// @TODO: dry run flag, silent flag, help flag

/*
 * if we have untracked files OR
 * we do not have a GITHUB_TOKEN OR
 * we are not given a version part
 * cancel immediately!
 *
 */

if (hasUntrackedFiles()) {
    userMessage(
        'You have untracked files! Cancelling release!',
        'white',
        { bg: 'bgRed', iconLeft: 'ðŸ˜±' },
    );
    return 1;
}

if (!process.env.GITHUB_TOKEN) {
    userMessage(
        'You need to add a GITHUB_TOKEN environment variable',
        'black',
        { bg: 'bgYellow' },
    );
    return 1;
}

if (!versionPart) {
    userMessage(
        'You need to specify the kind of release: major, minor or patch.',
        'black',
        { bg: 'bgYellow' },
    );
    return 1;
}

const {
    getCurrentBranch,
    createBranch,
    deleteLocalBranch,
    checkoutBranch,
    pushBranch,
    pushTag,
    moveTagToHead,
    addReleaseNotesToTag,
} = require('../release-src/branch-and-tags');
const {
    getPullRequests,
    createPullRequest,
} = require('../release-src/pull-requests');
const { bumpNpmVersion } = require('../release-src/npm');
const { generateChangelog } = require('../release-src/changelog');

const todaysDate = moment().format('YYYY-MM-DD');
const changeLogPath = path.resolve(__dirname, '../CHANGELOG.md');
const releaseBranch = `release--${todaysDate}`;
const currentBranch = getCurrentBranch();

async function release() {
    userMessage('Preparing to UI React', 'magenta', { iconRight: 'ðŸš€' });

    userMessage('Creating release branch from master...', 'yellow');
    createBranch(releaseBranch);

    userMessage('Bump NPM version...', 'yellow');
    const newVersionName = bumpNpmVersion(versionPart);

    userMessage('Writing changelog...', 'yellow');
    const githubResponse = await getPullRequests();
    const releaseNotes = generateChangelog(
        githubResponse.data.repository.pullRequests.nodes,
        changeLogPath,
        newVersionName,
    );

    moveTagToHead(newVersionName);

    userMessage('Pushing branch...', 'yellow');
    pushBranch(releaseBranch);

    userMessage('Pushing new tag...', 'yellow');
    pushTag(newVersionName);

    await addReleaseNotesToTag(newVersionName, releaseNotes);

    userMessage('Creating pull request...', 'yellow');
    const newPullRequest = await createPullRequest(releaseBranch, newVersionName);

    userMessage(`Checking out original branch (${currentBranch})...`, 'yellow');
    checkoutBranch(currentBranch);

    userMessage('Deleting release branch...', 'yellow');
    deleteLocalBranch(releaseBranch);

    userMessage(
        `Successfully created release pull request for ${newVersionName}`,
        'green',
        { iconRight: 'ðŸŽ‰' },
    );
    userMessage(
        ' Another developer must review the pull request to publish\n view the pull request here:',
        'reset',
        { flags: '-n' },
    );
    userMessage(`https://github.com/Mudano/ui-react/pull/${newPullRequest.data.number}`, 'cyan');

    return 0;
}

return release();
