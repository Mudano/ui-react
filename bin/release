#!/bin/bash

## convert this template to the live release script with:
##    argbash -o release release.m4

# Created by argbash-init v2.5.1
# ARG_POSITIONAL_SINGLE([version-part],[major|minor|patch])
# ARG_HELP([Utility script to release UI React])
# ARG_VERSION([echo $0 v1.0.0])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.5.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info

die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}

begins_with_short_option()
{
	local first_option all_short_options
	all_short_options='hv'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}



# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS

print_help ()
{
	printf "%s\n" "Utility script to release UI React"
	printf 'Usage: %s [-h|--help] [-v|--version] <version-part>\n' "$0"
	printf "\t%s\n" "<version-part>: major|minor|patch"
	printf "\t%s\n" "-h,--help: Prints help"
	printf "\t%s\n" "-v,--version: Prints version"
}

parse_commandline ()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			-v|--version)
				echo $0 v1.0.0
				exit 0
				;;
			-v*)
				echo $0 v1.0.0
				exit 0
				;;
			*)
				_positionals+=("$1")
				;;
		esac
		shift
	done
}


handle_passed_args_count ()
{
	_required_args_string="'version-part'"
	test ${#_positionals[@]} -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${#_positionals[@]}." 1
	test ${#_positionals[@]} -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${#_positionals[@]} (the last one was: '${_positionals[*]: -1}')." 1
}

assign_positional_args ()
{
	_positional_names=('_arg_version_part' )

	for (( ii = 0; ii < ${#_positionals[@]}; ii++))
	do
		eval "${_positional_names[ii]}=\${_positionals[ii]}" || die "Error during argument parsing, possibly an Argbash bug." 1
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


printf "Value of '%s': %s\n" 'version' "$_arg_version_part"


reset=`tput sgr0`
yellow=`tput setaf 3`
purple=`tput setaf 93`
red_bg=`tput setab 1`

## STOP IF UNTRACKED FILES ARE FOUND!
if ! git diff-index --quiet HEAD --
then
    echo "${red_bg}You have untracked files! Cancelling release!${reset}"
    exit
fi

echo "${purple}Releasing UI React${reset} ðŸš€ "

current_branch=$(git rev-parse --abbrev-ref HEAD)
release_branch=release--`date +%Y-%m-%d`
git_log_commit_hashes=$(git log --grep="Merge pull request" --max-count 10 --format=%H)
latest_pr_hash=${git_log_commit_hashes:0:40}
pr_title=$(git show --format=%b $latest_pr_hash)
pr_body="" ## @TODO: get pull request comment from github api?

echo "${yellow}Create release branch from master...${reset}"
git checkout master
git checkout -b $release_branch

echo "${yellow}Bump NPM version...${reset}"
npm version $_arg_version_part

echo "${yellow}Writing changelog...${reset}"
echo pr_title >> CHANGELOG.md
echo pr_body >> CHANGELOG.md
git commit -m "update changelog"

echo "${yellow}Push branch and tags...${reset}"

git push -u origin $release_branch
git push origin <tag_name>

## @TODO: get most recent tag from git

echo "${yellow}Create and merge pull request...${reset}"

## @TODO: create and merge pull request via github api

echo "${yellow}Checkout original branch ($current_branch)...${reset}"
git checkout $current_branch

echo "${yellow}Delete release branch...${reset}"
git branch -d $release_branch

# ] <-- needed because of Argbash
